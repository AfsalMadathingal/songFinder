<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice Recorder</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>
<body>
  <div class="recorder-container">
    <h1 class="welcome-message">Welcome to our Music Recognizer !</h1>
    <p class="instruction">Click the mic button to recognize the song.</p>
    <div class="recorder">
      <div class="control-buttons">
        <button id="start-recording">
          <i class="fas fa-microphone"></i>
        </button>
      </div>
      <div class="transcript-display">
        
      </div>
    </div>
  </div>

</body>
</html>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');

body {
  font-family: 'Poppins', sans-serif;
  background-color: #1c1c1c;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}

.recorder-container {
display: flex;
flex-direction: column;
justify-content: center;
align-items: center;
  background-color: #2c2c2c;
  padding: 30px;
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  text-align: center;
  color: #ffffff;
 
}

.recorder {
  margin-top: 20px;
  
}

.control-buttons button {
    
    display: flex;
    align-content: center;
    align-items: center;
    justify-content: center;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: #4CAF50;
  color: #ffffff;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-size: 24px;
}

.control-buttons button:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.transcript-display {
  margin-top: 20px;
  padding: 10px;
  background-color: #1c1c1c;
  border-radius: 4px;
  text-align: left;
  max-height: 200px;
  overflow-y: auto;
}

@media (max-width: 480px) {
  .recorder-container {
    padding: 20px;
  }

  .control-buttons button {
    width: 50px;
    height: 50px;
    font-size: 20px;
  }
}
</style>

<script>
const startRecordingButton = document.getElementById('start-recording');
const transcriptDisplay = document.getElementById('transcript');

let mediaRecorder;
let audioChunks = [];

function startRecording() {
  startRecordingButton.disabled = true;
  startRecordingButton.classList.add('recording');

  navigator.mediaDevices.getUserMedia({ audio: true })
    .then((stream) => {
      mediaRecorder = new MediaRecorder(stream);

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunks.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        sendAudioToServer(audioBlob);
        audioChunks = [];
        // Disable the media stream
        stream.getTracks().forEach((track) => track.stop());
        // Remove the recording interface
        //startRecordingButton.style.display = 'none';
      };

      mediaRecorder.start();
      setTimeout(() => {
        mediaRecorder.stop();
      }, 10000); // Recording duration, adjust as needed
    })
    .catch((error) => {
      console.error('Error accessing microphone:', error);
      startRecordingButton.disabled = false; // Enable button in case of error
      startRecordingButton.classList.remove('recording');
    });
}
function sendAudioToServer(audioBlob) {
  if (audioBlob.size === 0) {
    console.error('Audio Blob is empty.');
    return;
  }

  downloadAudio(audioChunks);

  const formData = new FormData();
  formData.append('audio', audioBlob);

  fetch('/upload-audio', {
    method: 'POST',
    body: formData,
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error('Failed to upload audio.');
      }
      console.log('Audio sent to server successfully');
      startRecordingButton.disabled = false; // Enable button after sending
      startRecordingButton.classList.remove('recording');
    })
    .catch((error) => {
      console.error('Error sending audio to server:', error);
      startRecordingButton.disabled = false; // Enable button in case of error
      startRecordingButton.classList.remove('recording');
    });
}

startRecordingButton.addEventListener('click', startRecording);



function downloadAudio(audioChunks) {
  const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
  const audioUrl = URL.createObjectURL(audioBlob);
  const link = document.createElement('a');
  link.href = audioUrl;
  link.download = 'recording.webm';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(audioUrl);
}



</script>